// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PASTORALISPROJECTNEW.DBContext;

#nullable disable

namespace PASTORALISPROJECTNEW.Migrations
{
    [DbContext(typeof(PastoralisDBContext))]
    partial class PastoralisDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PASTORPROJECTNEW.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDescription")
                        .HasColumnType("text");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Blockreporthistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BlockReason")
                        .HasColumnType("text");

                    b.Property<int?>("CounseleeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByNavigationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReported")
                        .HasColumnType("boolean");

                    b.Property<int?>("PastorId")
                        .HasColumnType("integer");

                    b.Property<string>("ReportReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CounseleeId");

                    b.HasIndex("CreatedByNavigationId");

                    b.HasIndex("PastorId");

                    b.ToTable("Blockreporthistories");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Bookingevent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("BookingStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("CounseleeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBooked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaymentSuccessful")
                        .HasColumnType("boolean");

                    b.Property<int?>("PastorId")
                        .HasColumnType("integer");

                    b.Property<int?>("SlotId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer");

                    b.Property<bool?>("SurveyAttempted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("CounseleeId");

                    b.HasIndex("PastorId");

                    b.HasIndex("SlotId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Bookingevents");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Bookingstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bookingstatuses");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Counselee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text");

                    b.Property<bool?>("SurveyAttempted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Counselees");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Counsellingtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CounsellingType1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Counsellingtypes");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Emailotp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Otpgeneratedtime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Emailotps");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Entitytype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EntityType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entitytypes");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Favouritepastor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CounseleeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PastorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CounseleeId");

                    b.HasIndex("PastorId");

                    b.ToTable("Favouritepastors");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Pastor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("PastorDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pastors");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Paymentdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int?>("CounseleeId")
                        .HasColumnType("integer");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CounseleeId");

                    b.HasIndex("EventId");

                    b.ToTable("Paymentdetails");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PlanCode")
                        .HasColumnType("text");

                    b.Property<string>("PlanName")
                        .HasColumnType("text");

                    b.Property<int?>("PlanPeriod")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PlanPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("PlanType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Plandate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PastorId")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating1")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PastorId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PastorId")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("text");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("ReviewedByNavigationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PastorId");

                    b.HasIndex("ReviewedByNavigationId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsPaymentSuccessful")
                        .HasColumnType("boolean");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PlanId");

                    b.HasIndex("StatusId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Sessionstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sessionstatuses");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvailabilityTime")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<int?>("PastorId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("SlotDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PastorId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionPlan")
                        .HasColumnType("text");

                    b.Property<decimal?>("SubscriptionPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CounselingType")
                        .HasColumnType("integer");

                    b.Property<int?>("CounselingTypeNavigationId")
                        .HasColumnType("integer");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Options")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CounselingTypeNavigationId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Surveyresponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CounseleeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CounselingType")
                        .HasColumnType("integer");

                    b.Property<int?>("CounselingTypeNavigationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CounseleeId");

                    b.HasIndex("CounselingTypeNavigationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Surveyresponses");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EntityType")
                        .HasColumnType("integer");

                    b.Property<int?>("EntityTypeNavigationId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LoginAttempt")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool?>("TermsAndConditionsAccepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeNavigationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Userentityaccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int?>("EntityType")
                        .HasColumnType("integer");

                    b.Property<int?>("EntityTypeNavigationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeNavigationId");

                    b.HasIndex("UserId");

                    b.ToTable("Userentityaccesses");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Userimage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Userimages");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.AuditLog", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Bookingevent", "Event")
                        .WithMany("AuditLogs")
                        .HasForeignKey("EventId");

                    b.HasOne("PASTORPROJECTNEW.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Blockreporthistory", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Counselee", "Counselee")
                        .WithMany("Blockreporthistories")
                        .HasForeignKey("CounseleeId");

                    b.HasOne("PASTORPROJECTNEW.Models.User", "CreatedByNavigation")
                        .WithMany("Blockreporthistories")
                        .HasForeignKey("CreatedByNavigationId");

                    b.HasOne("PASTORPROJECTNEW.Models.Pastor", "Pastor")
                        .WithMany("Blockreporthistories")
                        .HasForeignKey("PastorId");

                    b.Navigation("Counselee");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Pastor");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Bookingevent", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Bookingstatus", "BookingStatus")
                        .WithMany("Bookingevents")
                        .HasForeignKey("BookingStatusId");

                    b.HasOne("PASTORPROJECTNEW.Models.Counselee", "Counselee")
                        .WithMany("Bookingevents")
                        .HasForeignKey("CounseleeId");

                    b.HasOne("PASTORPROJECTNEW.Models.Pastor", "Pastor")
                        .WithMany("Bookingevents")
                        .HasForeignKey("PastorId");

                    b.HasOne("PASTORPROJECTNEW.Models.Slot", "Slot")
                        .WithMany("Bookingevents")
                        .HasForeignKey("SlotId");

                    b.HasOne("PASTORPROJECTNEW.Models.Subscription", "Subscription")
                        .WithMany("Bookingevents")
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("BookingStatus");

                    b.Navigation("Counselee");

                    b.Navigation("Pastor");

                    b.Navigation("Slot");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Favouritepastor", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Counselee", "Counselee")
                        .WithMany("Favouritepastors")
                        .HasForeignKey("CounseleeId");

                    b.HasOne("PASTORPROJECTNEW.Models.Pastor", "Pastor")
                        .WithMany("Favouritepastors")
                        .HasForeignKey("PastorId");

                    b.Navigation("Counselee");

                    b.Navigation("Pastor");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Paymentdetail", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Counselee", "Counselee")
                        .WithMany("Paymentdetails")
                        .HasForeignKey("CounseleeId");

                    b.HasOne("PASTORPROJECTNEW.Models.Bookingevent", "Event")
                        .WithMany("Paymentdetails")
                        .HasForeignKey("EventId");

                    b.Navigation("Counselee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Rating", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Pastor", "Pastor")
                        .WithMany("Ratings")
                        .HasForeignKey("PastorId");

                    b.Navigation("Pastor");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Review", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Pastor", "Pastor")
                        .WithMany("Reviews")
                        .HasForeignKey("PastorId");

                    b.HasOne("PASTORPROJECTNEW.Models.User", "ReviewedByNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewedByNavigationId");

                    b.Navigation("Pastor");

                    b.Navigation("ReviewedByNavigation");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Session", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Bookingevent", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId");

                    b.HasOne("PASTORPROJECTNEW.Models.Plan", "Plan")
                        .WithMany("Sessions")
                        .HasForeignKey("PlanId");

                    b.HasOne("PASTORPROJECTNEW.Models.Sessionstatus", "Status")
                        .WithMany("Sessions")
                        .HasForeignKey("StatusId");

                    b.Navigation("Event");

                    b.Navigation("Plan");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Slot", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Pastor", "Pastor")
                        .WithMany("Slots")
                        .HasForeignKey("PastorId");

                    b.Navigation("Pastor");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Survey", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Counsellingtype", "CounselingTypeNavigation")
                        .WithMany("Surveys")
                        .HasForeignKey("CounselingTypeNavigationId");

                    b.Navigation("CounselingTypeNavigation");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Surveyresponse", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Counselee", "Counselee")
                        .WithMany("Surveyresponses")
                        .HasForeignKey("CounseleeId");

                    b.HasOne("PASTORPROJECTNEW.Models.Counsellingtype", "CounselingTypeNavigation")
                        .WithMany("Surveyresponses")
                        .HasForeignKey("CounselingTypeNavigationId");

                    b.HasOne("PASTORPROJECTNEW.Models.Survey", "Question")
                        .WithMany("Surveyresponses")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Counselee");

                    b.Navigation("CounselingTypeNavigation");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.User", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Entitytype", "EntityTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("EntityTypeNavigationId");

                    b.Navigation("EntityTypeNavigation");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Userentityaccess", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.Entitytype", "EntityTypeNavigation")
                        .WithMany("Userentityaccesses")
                        .HasForeignKey("EntityTypeNavigationId");

                    b.HasOne("PASTORPROJECTNEW.Models.User", "User")
                        .WithMany("Userentityaccesses")
                        .HasForeignKey("UserId");

                    b.Navigation("EntityTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Userimage", b =>
                {
                    b.HasOne("PASTORPROJECTNEW.Models.User", "User")
                        .WithMany("Userimages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Bookingevent", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Paymentdetails");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Bookingstatus", b =>
                {
                    b.Navigation("Bookingevents");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Counselee", b =>
                {
                    b.Navigation("Blockreporthistories");

                    b.Navigation("Bookingevents");

                    b.Navigation("Favouritepastors");

                    b.Navigation("Paymentdetails");

                    b.Navigation("Surveyresponses");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Counsellingtype", b =>
                {
                    b.Navigation("Surveyresponses");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Entitytype", b =>
                {
                    b.Navigation("Userentityaccesses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Pastor", b =>
                {
                    b.Navigation("Blockreporthistories");

                    b.Navigation("Bookingevents");

                    b.Navigation("Favouritepastors");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Plan", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Sessionstatus", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Slot", b =>
                {
                    b.Navigation("Bookingevents");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Subscription", b =>
                {
                    b.Navigation("Bookingevents");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.Survey", b =>
                {
                    b.Navigation("Surveyresponses");
                });

            modelBuilder.Entity("PASTORPROJECTNEW.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Blockreporthistories");

                    b.Navigation("Reviews");

                    b.Navigation("Userentityaccesses");

                    b.Navigation("Userimages");
                });
#pragma warning restore 612, 618
        }
    }
}
